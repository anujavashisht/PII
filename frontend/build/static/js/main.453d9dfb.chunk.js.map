{"version":3,"sources":["App.js","index.js"],"names":["App","useState","inputURL","setInputURL","rows","setRows","setRowSelection","columns","setColumns","loading","setLoading","setError","table","length","className","pageSize","checkboxSelection","onSelectionModelChange","itm","data","filename","target","onSubmit","event","preventDefault","requestOptions","method","headers","body","JSON","stringify","url","fetch","then","response","json","tempCols","map","c","field","headerName","width","editable","tempRows","row","id","console","log","catch","error","FormControl","style","margin","InputLabel","htmlFor","Input","type","value","onChange","FormHelperText","Button","disabled","variant","color","LinearProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAgIeA,MAnHf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwCJ,mBAAS,IAAjD,mBAAqBK,GAArB,WACA,EAA8BL,mBAAS,IAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAA0BT,mBAAS,MAAnC,mBAAcU,GAAd,WACA,EAA8BV,mBAAS,MAAvC,mBAqDIW,GArDJ,UAqDY,8BAuBZ,OAtBoB,IAAhBR,EAAKS,SACPD,EACE,sBAAKE,UAAU,QAAf,UACE,cAAC,IAAD,CACEV,KAAMA,EACNG,QAASA,EACTQ,SAAU,GACVC,mBAAiB,EACjBC,uBAAwB,SAACC,GAAD,OAASZ,EAAgBY,MAEnD,cAAC,UAAD,CACEC,KAAMf,EACNgB,SAAU,UACVN,UAAU,eACVO,OAAO,SAJT,4BAaJ,sBAAKP,UAAU,MAAf,UACE,uBAAMQ,SAxEY,SAACC,GACrBA,EAAMC,iBAENd,GAAW,GACXC,EAAS,MAET,IAAMc,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,IAAK7B,KAG9B8B,MAAM,WAAYP,GACfQ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACd,GACLT,GAAW,GACX,IAAM0B,EAAWjB,EAAI,QAAYkB,KAAI,SAACC,GACpC,MAAO,CACLC,MAAOD,EACPE,WAAYF,EACZG,MAAO,IACPC,UAAU,MAGdlC,EAAW4B,GACX,IAAMO,EAAWxB,EAAI,QAAYkB,KAAI,SAACO,EAAKC,GACzC,OAAO,aAAEA,GAAIA,GAAOD,MAEtBE,QAAQC,IAAIJ,GACZtC,EAAQsC,MAETK,OAAM,SAACC,GACNvC,GAAW,GACXC,EAASsC,GACTH,QAAQG,MAAM,sBAAuBA,MAEzC9C,EAAY,KAoCV,UACE,eAAC+C,EAAA,EAAD,CAAaC,MAAO,CAAEV,MAAO,MAAOW,OAAQ,GAA5C,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,WAApB,uBACA,cAACC,EAAA,EAAD,CACEC,KAAK,MACLX,GAAG,MACHY,MAAOvD,EACP,mBAAiB,iBACjBwD,SApFW,SAACnC,GACpBpB,EAAYoB,EAAMF,OAAOoC,UAqFnB,cAACE,EAAA,EAAD,CAAgBd,GAAG,iBAAnB,8CAIF,cAACe,EAAA,EAAD,CACEC,UAAW3D,EACXsD,KAAK,SACLM,QAAQ,YACRC,MAAM,UAJR,yBAUDtD,EAAU,cAACuD,EAAA,EAAD,IAAqB,GAC/BpD,MCtHPqD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.453d9dfb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  FormControl,\n  InputLabel,\n  Input,\n  FormHelperText,\n  Button,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputURL, setInputURL] = useState(\"\");\n  const [rows, setRows] = useState([]);\n  const [rowSelection, setRowSelection] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [csvData, setCSVData] = useState(null);\n\n  const inputHandler = (event) => {\n    setInputURL(event.target.value);\n  };\n\n  const getPIIHandler = (event) => {\n    event.preventDefault();\n\n    setLoading(true);\n    setError(null);\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ url: inputURL }),\n    };\n\n    fetch(\"/get_pii\", requestOptions)\n      .then((response) => response.json())\n      .then((data) => {\n        setLoading(false);\n        const tempCols = data[\"columns\"].map((c) => {\n          return {\n            field: c,\n            headerName: c,\n            width: 150,\n            editable: false,\n          };\n        });\n        setColumns(tempCols);\n        const tempRows = data[\"rowData\"].map((row, id) => {\n          return { id: id, ...row };\n        });\n        console.log(tempRows);\n        setRows(tempRows);\n      })\n      .catch((error) => {\n        setLoading(false);\n        setError(error);\n        console.error(\"There was an error!\", error);\n      });\n    setInputURL(\"\");\n  };\n\n  const downloadCSVHandler = () => {\n    let downloadData = null;\n    if (rowSelection.length === 0) downloadData = rows;\n    else downloadData = rowSelection.map((id) => rows[id]);\n    console.log(downloadData);\n    setCSVData(downloadData);\n  };\n\n  let table = <></>;\n  if (rows.length !== 0) {\n    table = (\n      <div className=\"table\">\n        <DataGrid\n          rows={rows}\n          columns={columns}\n          pageSize={10}\n          checkboxSelection\n          onSelectionModelChange={(itm) => setRowSelection(itm)}\n        />\n        <CSVLink\n          data={rows}\n          filename={\"pii.csv\"}\n          className=\"download-btn\"\n          target=\"_blank\"\n        >\n          Export CSV\n        </CSVLink>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getPIIHandler}>\n        <FormControl style={{ width: \"60%\", margin: 5 }}>\n          <InputLabel htmlFor=\"my-input\">Enter URL</InputLabel>\n          <Input\n            type=\"url\"\n            id=\"url\"\n            value={inputURL}\n            aria-describedby=\"my-helper-text\"\n            onChange={inputHandler}\n          />\n          <FormHelperText id=\"my-helper-text\">\n            kindly provide .git url only.\n          </FormHelperText>\n        </FormControl>\n        <Button\n          disabled={!inputURL}\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Get Data\n        </Button>\n      </form>\n\n      {loading ? <LinearProgress /> : \"\"}\n      {table}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n"],"sourceRoot":""}